{
  "_args": [
    [
      {
        "raw": "git+https://github.com/tripflex/wifiwizard2.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://github.com/tripflex/wifiwizard2.git",
        "spec": "git+https://github.com/tripflex/wifiwizard2.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:tripflex/wifiwizard2.git",
          "sshUrl": "git+ssh://git@github.com/tripflex/wifiwizard2.git",
          "httpsUrl": "git+https://github.com/tripflex/wifiwizard2.git",
          "gitUrl": "git://github.com/tripflex/wifiwizard2.git",
          "shortcut": "github:tripflex/wifiwizard2",
          "directUrl": "https://raw.githubusercontent.com/tripflex/wifiwizard2/master/package.json"
        }
      },
      "/home/VICOMTECH/fzola/Desktop/Brick&Click/App/Awesome"
    ]
  ],
  "_from": "git+https://github.com/tripflex/wifiwizard2.git",
  "_id": "wifiwizard2@2.1.1",
  "_inCache": true,
  "_location": "/wifiwizard2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://github.com/tripflex/wifiwizard2.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://github.com/tripflex/wifiwizard2.git",
    "spec": "git+https://github.com/tripflex/wifiwizard2.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:tripflex/wifiwizard2.git",
      "sshUrl": "git+ssh://git@github.com/tripflex/wifiwizard2.git",
      "httpsUrl": "git+https://github.com/tripflex/wifiwizard2.git",
      "gitUrl": "git://github.com/tripflex/wifiwizard2.git",
      "shortcut": "github:tripflex/wifiwizard2",
      "directUrl": "https://raw.githubusercontent.com/tripflex/wifiwizard2/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/tripflex/wifiwizard2.git#f8c60767c8aa118ff274e46889e44487adb41b51",
  "_shasum": "ee2a000e45d154a6784b1da56f188db24093460c",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/tripflex/wifiwizard2.git",
  "_where": "/home/VICOMTECH/fzola/Desktop/Brick&Click/App/Awesome",
  "author": {
    "name": "Myles McNamara"
  },
  "bugs": {
    "url": "https://github.com/tripflex/wifiwizard2/issues"
  },
  "cordova": {
    "id": "wifiwizard2",
    "platforms": [
      "android",
      "ios"
    ]
  },
  "dependencies": {},
  "description": "Cordova WiFi Manager for Android and iOS",
  "devDependencies": {},
  "gitHead": "f8c60767c8aa118ff274e46889e44487adb41b51",
  "homepage": "https://github.com/tripflex/wifiwizard2#readme",
  "keywords": [
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios"
  ],
  "license": "Apache 2.0",
  "name": "wifiwizard2",
  "optionalDependencies": {},
  "readme": "# WifiWizard2\n\nWifiWizard2 enables Wifi management for both Android and iOS applications within Cordova/Phonegap projects.\n\nThis project is a fork of the [WifiWizard](https://github.com/hoerresb/WifiWizard) plugin with fixes and updates, as well as patches taken from the [Cordova Network Manager](https://github.com/arsenal942/Cordova-Network-Manager) plugin.  Majority of credit for code base goes to those projects.\n\n*iOS has limited functionality as Apple's WifiManager equivalent is only available  as a private API. Any app that used these features would not be allowed on the app store.*\n\n## Async Handling\nBecause Cordova `exec` calls are made asynchronously, there are helper functions you can call for each function, by appending `Async` to the end of the function name.  Those functions will return the results, or a JavaScript error.  You should use `await` and `try/catch` blocks.  See below for more details, and examples.\n\nPromises are handled by the [Cordova PromisesPlugin](https://github.com/vstirbu/PromisesPlugin) as an ES6 polyfill if your application does not already define `window.Promise` \n\nIt is strongly recommended to use the async functions instead of callbacks, but the choice is up to you, callbacks are still supported and will remain supported for backwards compatibility.\n\n# Global Functions\nThese are functions that can be used by both Android and iOS applications\n```javascript\nWifiWizard2.getConnectedSSID(success, fail)\n```\n```javascript\nWifiWizard2.getConnectedSSIDAsync()\n```\n - Returns connected network SSID (only if connected) in success callback, otherwise fail callback will be called (if not connected or unable to retrieve)\n - This does **NOT** return the BSSID if unable to obtain SSID (like original WifiWizard did)\n```javascript\nWifiWizard2.getConnectedBSSID(success, fail)\n```\n```javascript\nWifiWizard2.getConnectedBSSIDAsync()\n```\n - Same as above, except BSSID (mac) is returned\n```javascript\nWifiWizard2.scan([options], success, fail)\n```\n```javascript\nWifiWizard2.scanAsync([options])\n```\n- Same as calling `startScan` and then `getScanResults`, but this method returns the networks found in the callback\n\n# iOS Functions\nFor functionality, you need to note the following:\n - Connect/Disconnect only works for iOS11+\n - Can't run in the simulator so you need to attach an actual device when building with xCode\n - Need to add the 'HotspotConfiguration' and 'NetworkExtensions' capabilities to your xCode project\n\n```javascript\nWifiWizard2.iOSConnectNetwork(ssid, ssidPassword, success, fail)\n```\n```javascript\nWifiWizard2.iOSConnectNetworkAsync(ssid, ssidPassword)\n```\n```javascript\nWifiWizard2.iOSDisconnectNetwork(ssid, success, fail)\n```\n```javascript\nWifiWizard2.iOSDisconnectNetworkAsync(ssid)\n```\n\n# Android Functions\n - Based off the original [WifiWizard](https://github.com/hoerresb/WifiWizard) however will undergo a rework. \n - **WifiWizard2** *will automagically try to enable WiFi if it's disabled when calling any android related methods that require WiFi to be enabled*\n\n```javascript\nWifiWizard2.androidConnectNetwork(ssid, success, fail)\n```\n```javascript\nWifiWizard2.androidConnectNetworkAsync(ssid)\n```\n - WifiWizard will automatically disable/disconnect from currently connected networks to connect to SSID passed\n \n```javascript\nWifiWizard2.androidDisconnectNetwork(ssid, success, fail)\n```\n```javascript\nWifiWizard2.androidDisconnectNetworkAsync(ssid)\n```\n\n```javascript\nWifiWizard2.formatWifiConfig(ssid, password, algorithm)\n```\n - `algorithm` is not required if connecting to an open network\n - Currently `WPA` and `WEP` are only supported algorithms\n```javascript\nWifiWizard2.formatWPAConfig(ssid, password)\n```\n```javascript\nWifiWizard2.addNetwork(wifi, success, fail)\n```\n```javascript\nWifiWizard2.addNetworkAsync(wifi)\n```\n - `wifi` must be an object formatted by `formatWifiConfig`\n```javascript\nWifiWizard2.removeNetwork(wifi, success, fail)\n```\n```javascript\nWifiWizard2.removeNetworkAsync(wifi)\n```\n```javascript\nWifiWizard2.listNetworks(success, fail)\n```\n```javascript\nWifiWizard2.listNetworksAsync()\n```\n```javascript\nWifiWizard2.startScan(success, fail)\n```\n```javascript\nWifiWizard2.startScanAsync()\n```\n```javascript\nWifiWizard2.getScanResults([options], success, fail)\n```\n```javascript\nWifiWizard2.getScanResultsAsync([options])\n```\n- `[options]` is optional, if you do not want to specify, just pass `success` callback as first parameter, and `fail` callback as second parameter\n- Retrieves a list of the available networks as an array of objects and passes them to the function listHandler. The format of the array is:\n```javascript\nnetworks = [\n    {   \"level\": signal_level, // raw RSSI value\n        \"SSID\": ssid, // SSID as string, with escaped double quotes: \"\\\"ssid name\\\"\"\n        \"BSSID\": bssid // MAC address of WiFi router as string\n        \"frequency\": frequency of the access point channel in MHz\n        \"capabilities\": capabilities // Describes the authentication, key management, and encryption schemes supported by the access point.\n    }\n]\n```\nAn options object may be passed. Currently, the only supported option is `numLevels`, and it has the following behavior: \n\n- if `(n == true || n < 2)`, `*.getScanResults({numLevels: n})` will return data as before, split in 5 levels;\n- if `(n > 1)`, `*.getScanResults({numLevels: n})` will calculate the signal level, split in n levels;\n- if `(n == false)`, `*.getScanResults({numLevels: n})` will use the raw signal level;\n\n```javascript\nWifiWizard2.isWifiEnabled(success, fail)\n```\n```javascript\nWifiWizard2.isWifiEnabledAsync()\n```\n```javascript\nWifiWizard2.setWifiEnabled(enabled, success, fail)\n```\n```javascript\nWifiWizard2.setWifiEnabledAsync(enabled)\n```\n - Pass `true` for `enabled` parameter to set Wifi enabled\n - You do not need to call this function to set WiFi enabled to call other methods that require wifi enabled.  This plugin will automagically enable WiFi if a method is called that requires WiFi to be enabled.\n```javascript\nWifiWizard2.getConnectedNetworkID(success, fail)\n```\n```javascript\nWifiWizard2.getConnectedNetworkIDAsync()\n```\n - Returns currently connected network ID in success callback (only if connected), otherwise fail callback will be called\n\n### Installation\n\n##### Master\nRun ```cordova plugin add https://github.com/tripflex/wifiwizard2``` \n\nThis plugin is in active development. If you are wanting to have the latest and greatest stable version, then run the 'Releases' command below.\n\n##### Releases\nRun ```cordova plugin add wifiwizard2```\n\n##### Meteor\nTo install and use this plugin in a Meteor project, you have to specify the exact version from NPM repository:\n[https://www.npmjs.com/package/wifiwizard2](https://www.npmjs.com/package/wifiwizard2)\n\nAs of 1/9/2017, the latest version is 2.1.1:\n\n```meteor add cordova:wifiwizard2@2.1.1```\n\n### Examples\n\n##### Async WiFi Class\n\nBelow is an example class you can use for connecting to WiFi networks on Android.\n  \nYou will notice there is a `timeout` method that simulates a synchronous timeout/delay/pause, as well as calls to `SUIBlock` which is from my [Meteor Semantic UI Blocker plugin](https://github.com/tripflex/meteor-suiblocker), and is used to provide feedback to the user on their device.  That is what the `timeout` method is used for, to provide a better UI experience for the user by \"slowing\" down the process by \"pausing\" for 2 seconds (2000ms) between each call.  You can remove the timeout and calls to `SUIBlock` if you don't need them.\n\n```javascript\nclass ExampleWiFi {\n    \n    constructor( SSID ){\n        this.SSID = SSID;\n        this.delay = 2000; // delay in ms for timeout\n    }\n\n    async connect(){\n\n        try {\n\n            SUIBlock.block( 'Attempting to connect...' ); // Example is using my Semantic UI Blocker Meteor plugin ( https://github.com/tripflex/meteor-suiblocker )\n            await this.timeout(); // Timeouts are just used to simulate better UI experience when showing messages on screen\n\n            this.config  = WifiWizard2.formatWifiConfig(this.SSID);\n\n            await this.add();\n            await this.doConnect();\n\n            SUIBlock.unblock();\n\n            return true;\n\n        } catch( error ){\n\n            console.log( 'Wifi connect catch error: ', error );\n            throw new Error( error.message ); // Throw new error to allow async handling calling this method\n        }\n    }\n\n    async add(){\n\n        SUIBlock.block( 'Adding ' + this.SSID + ' to mobile device...' );\n        await this.timeout();\n\n        try {\n\n            await WifiWizard2.addNetworkAsync( this.config );\n            SUIBlock.block( \"Successfully added \" + this.SSID );\n            return true;\n\n        } catch( e ) {\n\n            throw new Error( \"Failed to add device WiFi network to your mobile device! Please try again, or manually connect to the device, disconnect, and then return here and try again.\" );\n\n        }\n    }\n\n    async doConnect(){\n\n        SUIBlock.block('Attempting connection to ' + this.SSID + ' ...' );\n\n        await this.timeout();\n\n        try {\n\n            await WifiWizard2.androidConnectNetworkAsync( this.SSID );\n            SUIBlock.block( \"Successfully connected to \" + this.SSID );\n            return true;\n\n        } catch( e ){\n\n            throw new Error( \"Failed to connect to device WiFi SSID \" + this.SSID );\n\n        }\n    }\n\n\n    /**\n     * Synchronous Sleep/Timeout `await this.timeout()`\n     */\n    timeout() {\n        let delay = parseInt( this.delay );\n        return new Promise(function(resolve, reject) {\n            setTimeout(resolve, delay);\n        });\n    }\n}\n\nmodule.exports = ExampleWiFi; // Not needed if using Meteor\n```\n\n##### Calling class from Async method\n\n```javascript\nasync connectToWiFi() {\n\n    try {\n        let wifi = new ExampleWiFi( 'my-ssid' );\n        await wifi.connect();\n\n        // Do something after WiFi has connected!\n\n    } catch ( error ){\n\n        console.log( 'Error connecting to WiFi!', error.message );\n\n    }\n}\n```\n\n##### Calling class from Blaze, or non-async methods\n\nIf you're not calling the class from an async function (required to use `await`), you can use `then` and `catch`:\n\n```javascript\nvar wifi = new ExampleWiFi( 'my-ssid' );\nvar wifiConnection = wifi.connect();\nwifiConnection.then( function( result ){\n   // Do something after connecting! \n});\n\nwifiConnection.catch( function( error ){\n   // Oh no there was an error! \n});\n```\n\nI recommend using [ES6 arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) to maintain `this` reference.  This is especially useful if you're using Blaze and Meteor.\n\n```javascript\nthis.FirstName = 'John';\n\nwifiConnection.then( result => {\n   // Do something after connecting!\n   // Using arrow functions, you still have access to `this`\n   console.log( this.FirstName + ' connected to wifi!' );\n});\n```\n\nLicense\n----\n\nApache 2.0\n\n## Changelog:\n\n#### 2.1.1 - *1/9/2017*\n- **Added Async Promise based methods**\n- Fix issue with thread running before wifi is fully enabled\n- Added thread sleep for up to 10 seconds waiting for wifi to enable\n\n#### 2.1.0 - *1/8/2017*\n- **Added Async Promise based methods**\n- Fixed incorrect Android Cordova exec methods incorrectly being called and returned (fixes INVALID ACTION errors/warnings)\n- Updated javascript code to call `fail` callback when error detected in JS (before calling Cordova)\n- Moved automagically enabling WiFi to `exec` actions (before actions called that require wifi enabled)\n- Added `es6-promise-plugin` cordova dependency to plugin.xml\n- Only return `false` in [Cordova Android](https://cordova.apache.org/docs/en/latest/guide/platforms/android/plugin.html) `execute` when invalid action is called\n [Issue #1](https://github.com/tripflex/WifiWizard2/issues/1)\n- Added JS doc blocks to JS methods\n- Added Async example code\n\n#### 2.0.0 - *1/5/2017*\n- Added automatic disable of currently connected network on connect call (to prevent reconnect to previous wifi ssid)\n- Added initial `disconnect()` before and `reconnect()` after disable/enable network on connect call\n- Added `getConnectedNetworkID` to return currently connected network ID\n- Added `verifyWiFiEnabled` to automatically enable WiFi for methods that require WiFi to be enabled\n- Strip enclosing double quotes returned on getSSID (android) [@props lianghuiyuan](https://github.com/hoerresb/WifiWizard/pull/59)\n- Fixed Android memory leak [@props Maikell84](https://github.com/hoerresb/WifiWizard/pull/122)\n- Add new ScanResult fields to results (centerFreq0,centerFreq1,channelWidth) [@props essboyer](https://github.com/hoerresb/WifiWizard/pull/102)\n- Added getConnectedBSSID to Android platform [@props caiocruz](https://github.com/hoerresb/WifiWizard/pull/82)\n- Added isWiFiEnabled implementation for ios [@props caiocruz](https://github.com/hoerresb/WifiWizard/pull/80)\n- Android Marshmallow Location Permissions Request [@props jimcortez](https://github.com/hoerresb/WifiWizard/pull/77)\n- Only return connected SSID if supplicantState is COMPLETED [@props admund1](https://github.com/hoerresb/WifiWizard/pull/75)\n- Added support for WEP [@props adamtegen](https://github.com/hoerresb/WifiWizard/pull/62)\n- Fix null issues with getConnectedSSID [@props jeffcharles](https://github.com/hoerresb/WifiWizard/pull/56)\n- Added `scan` method to return networks in callback [@props jeffcharles](https://github.com/hoerresb/WifiWizard/pull/55)\n- Call success callback after checking connection (on connect to network) [@props jeffcharles](https://github.com/hoerresb/WifiWizard/pull/46)\n\n**Changelog below this line, is from original WifiWizard**\n\n\n#### v0.2.9\n\n`isWifiEnabled` bug fixed. `level` in `getScanResults` object now refers to raw RSSI value. The function now accepts an options object, and by specifiying `{ numLevels: value }` you can get the old behavior.\n\n#### v0.2.8\n\n`getScanResults` now returns the BSSID along with the SSID and strength of the network.\n\n#### v0.2.7\n\n- Clobber WifiWizard.js automatically via Cordova plugin architecture\n\n#### v0.2.6 \n\n- Added `isWifiEnabled`, `setWifiEnabled`\n\n#### v0.2.5 \n\n- Fixes `getConnectedSSID` error handlers\n\n#### v0.2.4 \n\n- Added `getConnectedSSID` method\n\n#### v0.2.3 \n\n- Added `disconnect` that does disconnection on current WiFi\n\n#### v0.2.2 \n\n- Added `startScan` and `getScanResults`\n\n#### v0.2.1 \n\n- Fixed reference problem in `formatWPAConfig`\n\n#### v0.2.0 \n\n- Changed format of wifiConfiguration object to allow more extensibility.\n\n#### v0.1.1 \n\n- `addNetwork` will now update the network if the SSID already exists.\n\n#### v0.1.0 \n\n- All functions now work!\n\n#### v0.0.3 \n\n- Fixed errors in native implementation. Currently, Add and Remove networks aren't working, but others are working as expected.\n\n#### v0.0.2 \n\n- Changed plugin.xml and WifiWizard.js to attach WifiWizard directly to the HTML.\n\n#### v0.0.1 \n\n- Initial commit\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tripflex/wifiwizard2.git"
  },
  "version": "2.1.1"
}
